package cn.hl.ox.word;

import java.lang.reflect.Field;

/**
 * 对读取字符分类相关操作
 */
public class TypeUtil {
    public static final  char   LINE_CHAR    = '\n';
    private static final String KEYWORDS[]   = {//
            "abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "continue", "default",//
            "do", "double", "else", "extends", "final", "finally", "float", "for", "if", "implements", "import",//
            "instanceof", "int", "interface", "long", "native", "new", "package", "private", "protected", "public",//
            "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient",//
            "try", "void", "volatile", "while", "strictfp", "enum", "goto", "const", "assert"}; // 关键字数组
    private static final char   OPERATORS[]  = {'+', '-', '*', '/', '=', '>', '<', '&', '|', '!'}; // 运算符数组
    private static final char   SEPARATORS[] = {',', ';', '{', '}', '(', ')', '[', ']', '_', ':', '.', '"', '\''}; // 界符数组

    /**
     * 判断是否为字母
     * @param ch 需判断的字符
     * @return boolean
     */
    public boolean isLetter(char ch) {
        return Character.isLetter(ch);
    }

    /**
     * 判断是否为数字
     * @param ch 需判断的字符
     * @return boolean
     */
    public boolean isDigit(char ch) {
        return Character.isDigit(ch);
    }

    /**
     * 判断是否为关键字
     * @param s 需判断的字符串
     * @return boolean
     */
    public boolean isKeyWord(String s) {
        for (int i = 0; i < KEYWORDS.length; i++) {
            if (KEYWORDS[i].equals(s)) {
                return true;
            }
        }
        return false;
    }

    /**
     * 判断是否为运算符
     * @param ch 需判断的字符
     * @return boolean
     */
    public boolean isOperator(char ch) {
        for (int i = 0; i < OPERATORS.length; i++) {
            if (ch == OPERATORS[i]) {
                return true;
            }
        }
        return false;
    }

    /**
     * 判断是否为分隔符
     * @param ch 需判断的字符
     * @return boolean
     */
    public boolean isSeparators(char ch) {
        for (int i = 0; i < SEPARATORS.length; i++) {
            if (ch == SEPARATORS[i]) {
                return true;
            }
        }
        return false;
    }

    /**
     * 利用反射获取种别编码
     * @param args 属性名称
     * @return 种别编码
     */
    public int getType(String args) {
        int type = -1;
        Field[] fields = KeyTypes.class.getDeclaredFields();
        for (Field field : fields) {
            if (field.getName().equals(args)) {
                try {
                    type = (Integer) field.get(new KeyTypes());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return type;
    }
}
