== GIT ==
================================================================================================================================
-- 原理 --
1、四大区域的理解
   1、工作区：项目所在目录
   2、暂存区：暂时保存 git add 后的文件
   3、本地仓库：本地保存文件的修改记录的地方
   4、远程仓库：服务端保存文件的修改记录的地方

2、四大区域之间的转换
   1、将文件从工作区添加到暂存区命令 git add <file>;
   2、将文件从暂存区移除到工作区命令 git reset head <file>;
   3、将文件从暂存区提交到本地仓库 git commit <file>;
   4、将某一次改动的文件从本地仓库，返回到暂存区(保存修改内容)
      git reset —soft  3dee976bb02fe195d726(commit 标识)
   5、远程更新代码到本地命令 git pull
   6、将本地代码从本地推送到远程 git push

3、常见流程区域的转换(操作前状态：从远程库刚拉下代码)
   1、修改文件,文件此时处于工作目录，点击 Android studio 下方 Version Control 可以看到修改文件
   2、此时使用 git commit 提交某个文件是不行的，得先执行git add 把修改文件放到暂存区
   3、放到暂存区以后执行 git commit 命令可以把代码提交到本地仓库(在文件上点击右键实际上是执行了两步)
   4、代码提交本地库，再次修改代码，修改文件又处于工作区状态，这是再次提交仍然需要先 git add 再 git commit 两个操作。
   5、执行 git push 本地仓库的代码推送的远程

================================================================================================================================
-- 常见的命令操作 --
1、查看状态
   1、查看文件修改状态：git status
   2、查看添加记录：git log
2、分支操作
   1、查看所有分支：git branch - -all
   2、将某分支合并到当前分支：git merge dev
   3、切换到某本地已存在分支：git checkout dev
   4、在当前分支克隆新分支并切换到新分支：git checkout -b dev
3、提交操作
   1、本地提加到暂存区：git add
   2、暂存区添加到本地仓库：git commit
   3、本地仓库更新代码：git pull
   4、本地代码推到远程：git push
   5、恢复到某一次提交（提交以后的修改全部清除，慎用）
      git reset - -hard 3dee975b85a555d726(commit 标识)
   6、恢复到某一次提交（提交以后的修改全部返回暂存区）
      git reset - -soft 3ded635b85a555d726(commit 标识)
四、常见问题以及解决
   1、本地提交出错或想修改提交注释
      git reset - -soft  3dee976bb02fe15a555d726(commit 标识)
      上面命令可以让提交恢复到暂存区，让你重新做人
   2、保存本地工作目录修改状态，切换其他分支干其他事情（最喜欢用命令）
      git stash 保存状态
      git stash pop 恢复
      最神奇命令，很多时候开发到一半，不能提交。但不提交还不能切换其他分支，这时候这个命令就非常神奇
   3、避免冲突扩大话
      在向远程推送代码前先更新代码，解决冲突再提交，然后在推代码

================================================================================================================================
-- GIT切换远程分支 --
git clone只能clone远程库的master分支，无法clone所有分支，解决办法如下： 
1. 找一个干净目录，假设是git_work 
2. cd git_work 
3. git clone http://myrepo.xxx.com/project/.git  这样在git_work目录下得到一个project子目录
 4. cd project
 5. git branch -a  列出所有分支名称如下：
    remotes/origin/dev 
    remotes/origin/release 
6. git checkout -b dev origin/dev  作用是checkout远程的dev分支，在本地起名为dev分支，并切换到本地的dev分支 
7. git checkout -b release origin/release  作用参见上一步解释 
8. git checkout dev  切换回dev分支，并开始开发。

================================================================================================================================
|GIT  https://www.cnblogs.com/ludashi/p/8093145.html
|VIM  https://www.cnblogs.com/yangjig/p/6014198.html

GIT本地分支和远程分支改名
#1 将本地分支进行改名
git branch -m old_branch new_branch
#2 将远程分支的老分支删除
git push origin :old_branch
#3 将改名后的分支push到远程
git push origin new_branch

开发分支(dev)上的代码达到上线的标准后,要合并到主(master)分支
git checkout dev
git pull
git checkout master
git pull
git merge dev
git push -u origin master

先输入双引号，但是不要输入后面的双引号，然后就可以输入多行了，直到最后输入双引号，再回车就是结束即可。
git commit -m "提交注释"

================================================================================================================================
-- GIT 修改commit的备注 --
两种情况：
1. 已经将代码push到远程仓库
2. 还没将代码push到远程仓库，还在本地的仓库中
Ⓐ 修改最后一次注释
如果你只想修改最后一次注释（就是最新的一次提交），那好办：
git commit --amend
出现有注释的界面（你的注释应该显示在第一行）， 输入i进入修改模式，修改好注释后，按Esc键 退出编辑模式，输入:wq保存并退出。ok，修改完成。
Ⓑ 修改之前的某次注释
1.输入：git rebase -i HEAD~2  最后的数字2指的是显示到倒数第几次 比如这个输入的2就会显示倒数的两次注释（最上面两行）
2.你想修改哪条注释，就把哪条注释前面的pick换成edit。方法就是上面说的编辑方式：i---编辑，把pick换成edit---Esc---:wq。
3.然后：（接下来的步骤Terminal会提示）git commit --amend
4.修改注释，保存并退出后，输入：git rebase --continue
其实这个原理我的理解就是先版本回退到你想修改的某次版本，然后修改当前的commit注释，然后再回到本地最新的版本
Ⓒ 修改之前的某几次注释
修改多次的注释其实步骤和上面的一样，不同点在于：
1.同上
2.你可以将多个想修改的commit注释前面的pick换成edit
3.依次修改你的注释（顺序是从旧到新），Terminal基本都会提示你接下来的操作，每修改一个注释都要重复上面的3和4步，直到修改完你所选择的所有注释
Ⓓ 已经将代码push到远程仓库
首先，你把最新的版本从远程仓库先pull下来，修改的方法都如上，最后修改完成后，强制push到远程仓库：
git push --force origin master
注：很重要的一点是，你最好保证在你强制push之前没有人提交代码，如果在你push之前有人提交了新的代码到远程仓库，然后你又强制push，那么会被你的强制更新覆盖！！！

================================================================================================================================
== Synchronize git 2 github -----------
git init
git add .
git commit -m "Initial commit"
git remote add origin http://
git push -u origin master
== Git global setup -------------------
git config --global user.name "HymanLi"
git config --global user.email "hyman.li@zenlayer.com"
== Create a new repository --
git clone git@gitlab.zenlayer.net:sh-dev/module/oss-basic-data.git
cd oss-basic-data
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master
== Push an existing folder ------------
cd existing_folder
git init
git remote add origin git@gitlab.zenlayer.net:sh-dev/module/oss-basic-data.git
git add .
git commit -m "Initial commit"
git push -u origin master
== Push an existing Git repository ----
cd existing_repo
git remote rename origin old-origin
git remote add origin git@gitlab.zenlayer.net:sh-dev/module/oss-basic-data.git
git push -u origin --all
git push -u origin --tags
== Delete the commit log of github ----
# Clone your git repo
git clone https://github.com/someone/project.github.io.git;
# Entre your local repo
cd project.github.io;
# Checkout
git checkout --orphan latest_branch;
# Add all the files
git add -A;
# Commit the changes
git commit -am "Reinitialize";
# Delete the branch
git branch -D master;
# Rename the current branch to master
git branch -m master;
# Finally, force update your repository
git push -f origin master;

================================================================================================================================
-- GIT修改远程仓库地址 --
方法有三种：
1.修改命令
git remote origin set-url [url]
2.先删后加
git remote rm origin
git remote add origin [url]
3.直接修改config文件

================================================================================================================================
-- GIT如何删除某个本地的提交 --
一、rm后要commit一下才会生效，但这样只是让文件不再出现在今后的版本中，文件副本仍然会在.git/下（这样git才能让误删的文件恢复）。
要彻底消灭文件副本，那就要让文件彻底从历史中消失，分两种情况：
1、如果你的文件添加记录是最近1次，而且没有别的更改，可以简单使用reset --hard commit_id来彻底回溯，然后gc一下再上传就没问题了。
2、如果是在你N次提交以内的某次，而且同时还有别的重要提交，那最好用rebase合并一下这几次提交记录（包括rm的commit），然后再gc提交
二、撤销commit的一些方法
1、git reset –mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息
2、git reset –soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可
3、git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容
三、其他一些方法
1、git revert 是撤销某次操作，此次操作之前的commit都会被保留
2、git reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区
3、git reset --hard HEAD~1
4、git revert HEAD
